/*
    Copyright 2021 Picovoice Inc.

    You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
    file accompanying this source.

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.
*/

import OctWorker from 'web-worker:./octopus_worker.ts';
import type { OctopusWorkerRequestInit, OctopusWorkerResponse, OctopusWorker } from './octopus_types';

export class OctopusWorkerFactory {
  private constructor() { }

  /**
   * Create Octopus web worker instances. The promise resolves when
   * the Octopus Worker is ready to index audio data.
   *
   * @param accessKey - AccessKey generated by Picovoice Console (https://picovoice.ai/console)
   */
  public static async create(
    accessKey: string,
    indexCallback?: CallableFunction,
    searchCallback?: CallableFunction,
    errorCallback?: CallableFunction,
  ): Promise<Worker> {
    // n.b. The *worker* creation is itself synchronous. But, inside the worker is an async
    // method of OctopusFactory which is initializing. This means the worker is not actually ready
    // for voice processing immediately after intantiation. When its initialization completes,
    // we receive a special OctopusWorkerResponse message ('octopus-ready'), and resolve the promise.

    const octopusWorker = new OctWorker();

    const octopusInitCmd: OctopusWorkerRequestInit = {
      command: 'init',
      accessKey: accessKey,
    };
    octopusWorker.postMessage(octopusInitCmd);

    const workerPromise = new Promise<OctopusWorker>((resolve, reject) => {
      octopusWorker.onmessage = (
        event: MessageEvent<OctopusWorkerResponse>
      ): void => {
        switch (event.data.command) {
          case 'octopus-ready':
            resolve(octopusWorker);
            break;
          case 'octopus-failed':
            reject(event.data.message);
            break;
          case 'octopus-index':
            if (indexCallback !== undefined) {
              indexCallback(event.data.metadata);
            }
            break;
          case 'octopus-search':
            if (searchCallback !== undefined) {
              searchCallback(event.data.matches);
            }
            break;
          case 'octopus-error':
            if (errorCallback !== undefined) {
              errorCallback(event.data.message);
            }
            break;
          default:
            // eslint-disable-next-line no-console
            console.warn(`Unhandled message in main.js: ${event.data}`);
            break;
        }
      };
    });

    return workerPromise;
  }
}
