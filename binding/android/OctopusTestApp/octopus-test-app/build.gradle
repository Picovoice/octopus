apply plugin: 'com.android.application'

Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
    if (project.hasProperty("pvTestingAccessKey")) {
        properties.put("pvTestingAccessKey", project.getProperty("pvTestingAccessKey"))
    }
    if (project.hasProperty("numTestIterations")) {
        properties.put("numTestIterations", project.getProperty("numTestIterations"))
    }
    if (project.hasProperty("indexPerformanceThresholdSec")) {
        properties.put("indexPerformanceThresholdSec", project.getProperty("indexPerformanceThresholdSec"))
    }
    if (project.hasProperty("searchPerformanceThresholdSec")) {
        properties.put("searchPerformanceThresholdSec", project.getProperty("searchPerformanceThresholdSec"))
    }

    if (project.hasProperty("storePassword")) {
        properties.put("storePassword", project.getProperty("storePassword"))
    }
    if (project.hasProperty("storeFile")) {
        properties.put("storeFile", project.getProperty("storeFile"))
    }
    if (project.hasProperty("keyAlias")) {
        properties.put("keyAlias", project.getProperty("keyAlias"))
    }
    if (project.hasProperty("keyPassword")) {
        properties.put("keyPassword", project.getProperty("keyPassword"))
    }
}

android {
    compileSdk defaultTargetSdkVersion

    defaultConfig {
        applicationId "ai.picovoice.octopus.testapp"
        minSdkVersion 21
        targetSdkVersion defaultTargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue 'string', 'pvTestingAccessKey', properties.getProperty("pvTestingAccessKey", "")
        resValue 'string', 'numTestIterations', properties.getProperty("numTestIterations", "")
        resValue 'string', 'indexPerformanceThresholdSec', properties.getProperty("indexPerformanceThresholdSec", "")
        resValue 'string', 'searchPerformanceThresholdSec', properties.getProperty("searchPerformanceThresholdSec", "")
    }

    signingConfigs {
        release {
            storePassword properties.getProperty("storePassword")
            storeFile file(properties.getProperty("storeFile", ".dummy.jks"))
            keyAlias properties.getProperty("keyAlias")
            keyPassword properties.getProperty("keyPassword")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    if (System.getProperty("testBuildType", "debug") == "integ") {
        testBuildType("release")
    }

    task("copyParams", type: Copy) {
        from("$projectDir/../../../../lib/common/param/")
        include("octopus_params.pv")
        into("$projectDir/src/main/assets/models")
    }
    task("copyAudio", type: Copy) {
        description = "Copy audio resources"
        from("$projectDir/../../../../res/audio/")
        include("multiple_keywords.wav")
        into("$projectDir/src/main/assets/audio/")
    }

    sourceSets {
        androidTest {
            java {
                if (System.getProperty("testBuildType", "debug") == "perf") {
                    exclude "**/OctopusTest.java"
                    exclude "**/IntegrationTest.java"
                    exclude "**/LanguageTests.java"
                } else if (System.getProperty("testBuildType", "debug") == "integ") {
                    exclude "**/OctopusTest.java"
                    exclude "**/PerformanceTest.java"
                    exclude "**/LanguageTests.java"
                } else {
                    exclude "**/IntegrationTest.java"
                    exclude "**/PerformanceTest.java"
                }
            }
        }
    }

    lint {
        abortOnError false
    }
    namespace 'ai.picovoice.octopus.testapp'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'ai.picovoice:octopus-android:2.0.0'

    // Espresso UI Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.5.1')
}

afterEvaluate {
    tasks."mergeDebugAssets".dependsOn "copyParams"
    tasks."mergeReleaseAssets".dependsOn "copyParams"
    tasks."generateReleaseLintVitalReportModel".dependsOn "copyParams"
    tasks."mergeDebugAssets".dependsOn "copyAudio"
    tasks."mergeReleaseAssets".dependsOn "copyAudio"
    tasks."generateReleaseLintVitalReportModel".dependsOn "copyAudio"
}
