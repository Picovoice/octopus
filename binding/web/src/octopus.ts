/*
  Copyright 2022 Picovoice Inc.

  You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
  file accompanying this source.

  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  specific language governing permissions and limitations under the License.
*/

/* eslint camelcase: 0 */

import { Mutex } from "async-mutex";

import { simd } from "wasm-feature-detect";

import {
  aligned_alloc_type,
  pv_free_type,
  buildWasm,
  arrayBufferToStringAtIndex,
  isAccessKeyValid,
  fromBase64,
  fromPublicDirectory
} from "@picovoice/web-utils";

import {OctopusInitConfig, OctopusConfig, OctopusMetadata, OctopusMatch} from "./types";

/**
 * WebAssembly function types
 */

type pv_octopus_init_type = (accessKey: number, modelPath: number, object: number) => Promise<number>;
type pv_octopus_index_type = (object: number, pcm: number, numSamples: number, indices: number, numIndicesBytes: number) => Promise<number>;
type pv_octopus_search_type = (object: number, indices: number, numIndicesBytes: number, phrase: number, matches: number, numMatches: number) => Promise<number>;
type pv_octopus_delete_type = (object: number) => Promise<void>;
type pv_status_to_string_type = (status: number) => Promise<number>
type pv_sample_rate_type = () => Promise<number>;
type pv_octopus_version_type = () => Promise<number>;

/**
* JavaScript/WebAssembly Binding for Octopus
*/

type OctopusWasmOutput = {
  memory: WebAssembly.Memory;
  alignedAlloc: aligned_alloc_type;
  pvFree: pv_free_type;
  objectAddress: number;
  pvOctopusDelete: pv_octopus_delete_type;
  pvOctopusIndex: pv_octopus_index_type;
  pvOctopusSearch: pv_octopus_search_type;
  pvStatusToString: pv_status_to_string_type;
  sampleRate: number;
  version: string;
  metadataAddressAddress: number;
  metadataLengthAddress: number;
  octopusMatchAddressAddress: number;
  octopusMatchLengthAddress: number;
};

const PV_STATUS_SUCCESS = 10000;

export class Octopus {
  private readonly _pvOctopusDelete: pv_octopus_delete_type;
  private readonly _pvOctopusIndex: pv_octopus_index_type;
  private readonly _pvOctopusSearch: pv_octopus_search_type;
  private readonly _pvStatusToString: pv_status_to_string_type;

  private _wasmMemory?: WebAssembly.Memory;
  private _pvFree: pv_free_type;
  private readonly _memoryBufferView: DataView;
  private readonly _processMutex: Mutex;

  private readonly _objectAddress: number;
  private readonly _alignedAlloc: CallableFunction;
  private _metadataAddressAddress: number;
  private _metadataLengthAddress: number;
  private _octopusMatchAddressAddress: number;
  private _octopusMatchLengthAddress: number;

  private static _sampleRate: number;
  private static _version: string;
  private static _wasm: string;
  private static _wasmSimd: string;

  private static _octopusMutex = new Mutex();

  private constructor(handleWasm: OctopusWasmOutput) {
    Octopus._sampleRate = handleWasm.sampleRate;
    Octopus._version = handleWasm.version;

    this._alignedAlloc = handleWasm.alignedAlloc;
    this._pvFree = handleWasm.pvFree;

    this._pvOctopusDelete = handleWasm.pvOctopusDelete;
    this._pvOctopusIndex = handleWasm.pvOctopusIndex;
    this._pvOctopusSearch = handleWasm.pvOctopusSearch;
    this._pvStatusToString = handleWasm.pvStatusToString;

    this._wasmMemory = handleWasm.memory;
    this._objectAddress = handleWasm.objectAddress;
    this._metadataAddressAddress = handleWasm.metadataAddressAddress;
    this._metadataLengthAddress = handleWasm.metadataLengthAddress;
    this._octopusMatchAddressAddress = handleWasm.octopusMatchAddressAddress;
    this._octopusMatchLengthAddress = handleWasm.octopusMatchLengthAddress;

    this._memoryBufferView = new DataView(handleWasm.memory.buffer);
    this._processMutex = new Mutex();
  }

  /**
   * Get Octopus engine version.
   */
  get version(): string {
    return Octopus._version;
  }

  /**
   * Get sample rate.
   */
  get sampleRate(): number {
    return Octopus._sampleRate;
  }

  /**
   * Creates an instance of the Picovoice Octopus Speech-to-Text engine using a base64'd string
   * of the model file. The model size is large, hence it will try to use the
   * existing one if it exists, otherwise saves the model in storage.
   *
   * @param accessKey AccessKey generated by Picovoice Console.
   * @param modelBase64 The model in base64 string to initialize Octopus.
   * @param options Optional configuration arguments.
   * @param options.modelPath The path to save and use the model from. Use different names to use different models
   * across different Octopus instances.
   * @param options.forceWrite Flag to overwrite the model in storage even if it exists.
   * @param options.version Octopus model version. Set to a higher number to update the model file.
   *
   * @returns An instance of the Octopus engine.
   */
  public static async fromBase64(
    accessKey: string,
    modelBase64: string,
    options: OctopusConfig = {}
  ): Promise<Octopus> {
    const {modelPath = "octopus_model", forceWrite = false, version = 1, ...rest} = options;
    await fromBase64(modelPath, modelBase64, forceWrite, version);
    return this.create(accessKey, modelPath, rest);
  }

  /**
   * Creates an instance of the Picovoice Octopus Speech-to-Text engine using '.pv' file in
   * public directory. The model size is large, hence it will try to use the existing one if it exists,
   * otherwise saves the model in storage.
   *
   * @param accessKey AccessKey generated by Picovoice Console.
   * @param publicPath The relative path to the public directory the server is hosted.
   * @param options Optional configuration arguments.
   * @param options.modelPath The path to save and use the model from. Use different names to use different models
   * across different Octopus instances.
   * @param options.forceWrite Flag to overwrite the model in storage even if it exists.
   * @param options.version Octopus model version. Set to a higher number to update the model file.
   *
   * @returns An instance of the Octopus engine.
   */
  public static async fromPublicDirectory(
    accessKey: string,
    publicPath: string,
    options: OctopusConfig = {}
  ): Promise<Octopus> {
    const {modelPath = "octopus_model", forceWrite = false, version = 1, ...rest} = options;
    await fromPublicDirectory(modelPath, publicPath, forceWrite, version);
    return this.create(accessKey, modelPath, rest);
  }

  /**
   * Set base64 wasm file.
   * @param wasm Base64'd wasm file to use to initialize wasm.
   */
  public static setWasm(wasm: string): void {
    if (this._wasm === undefined) {
      this._wasm = wasm;
    }
  }

  /**
   * Set base64 wasm file with SIMD feature.
   * @param wasmSimd Base64'd wasm file to use to initialize wasm.
   */
  public static setWasmSimd(wasmSimd: string): void {
    if (this._wasmSimd === undefined) {
      this._wasmSimd = wasmSimd;
    }
  }

  /**
   * Creates an instance of the Picovoice Octopus Speech-to-Text engine.
   * Behind the scenes, it requires the WebAssembly code to load and initialize before
   * it can create an instance.
   *
   * @param accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/)
   * @param modelPath Path to the model saved in indexedDB.
   * @param initConfig Flag to enable automatic punctuation insertion.
   *
   * @returns An instance of the Octopus engine.
   */
  public static async create(accessKey: string, modelPath: string, initConfig: OctopusInitConfig): Promise<Octopus> {
    if (!isAccessKeyValid(accessKey)) {
      throw new Error('Invalid AccessKey');
    }
    return new Promise<Octopus>((resolve, reject) => {
      Octopus._octopusMutex
        .runExclusive(async () => {
          const isSimd = await simd();
          const wasmOutput = await Octopus.initWasm(accessKey.trim(), (isSimd) ? this._wasmSimd : this._wasm, modelPath, initConfig);
          return new Octopus(wasmOutput);
        })
        .then((result: Octopus) => {
          resolve(result);
        })
        .catch((error: any) => {
          reject(error);
        });
    });
  }

  /**
   * Processes multiple frames of audio samples. The required sample rate can be retrieved from '.sampleRate'.
   * The audio needs to bit 16-bit linearly-encoded. Furthermore, the engine operates on single-channel audio.
   *
   * @param pcm - A sample of audio with properties described above.
   * @return Octopus metadata object.
   */
  public async index(pcm: Int16Array): Promise<OctopusMetadata> {
    if (!(pcm instanceof Int16Array)) {
      throw new Error("The argument 'pcm' must be provided as an Int16Array");
    }

    const returnPromise = new Promise<OctopusMetadata>((resolve, reject) => {
      this._processMutex.runExclusive(async () => {
        if (this._wasmMemory === undefined) {
          throw new Error("Attempted to call Octopus index after release.");
        }

        const pcmAddress = await this._alignedAlloc(
          Int16Array.BYTES_PER_ELEMENT,
          (pcm.length) * Int16Array.BYTES_PER_ELEMENT
        );

        const memoryBufferInt16 = new Int16Array(this._wasmMemory.buffer);
        memoryBufferInt16.set(pcm, pcmAddress / Int16Array.BYTES_PER_ELEMENT);

        const status = await this._pvOctopusIndex(
          this._objectAddress,
          pcmAddress,
          pcm.length,
          this._metadataAddressAddress,
          this._metadataLengthAddress
        );
        await this._pvFree(pcmAddress);
        if (status !== PV_STATUS_SUCCESS) {
          const memoryBufferUint8 = new Uint8Array(this._wasmMemory.buffer);
          throw new Error(
            `index failed with status ${arrayBufferToStringAtIndex(
              memoryBufferUint8,
              await this._pvStatusToString(status)
            )}`
          );
        }

        const metadataAddress = this._memoryBufferView.getInt32(
          this._metadataAddressAddress,
          true
        );

        const metadataLength = this._memoryBufferView.getInt32(
          this._metadataLengthAddress,
          true
        );

        return { metadataAddress, metadataLength };
      }).then((result: OctopusMetadata) => {
        resolve(result);
      }).catch((error: any) => {
        reject(error);
      });
    });
    return returnPromise;
  }

  /**
   * Searches metadata for a given search phrase.
   *
   * @param octopusMetadata - An octopus metadata object.
   * @param searchPhrase - The text phrase to search the metadata (indexed audio) for.
   * @return An array of OctopusMatch objects.
   */
  public async search(octopusMetadata: OctopusMetadata, searchPhrase: string): Promise<OctopusMatch[]> {
    const returnPromise = new Promise<OctopusMatch[]>((resolve, reject) => {
      this._processMutex.runExclusive(async () => {
        if (this._wasmMemory === undefined) {
          throw new Error("Attempted to call Octopus search after release.");
        }

        const searchPhraseCleaned = searchPhrase.trim();
        if (searchPhraseCleaned === '') {
          throw new Error('The search phrase cannot be empty');
        }

        const encoded = new TextEncoder().encode(searchPhraseCleaned);

        const phraseAddress = await this._alignedAlloc(
          Uint8Array.BYTES_PER_ELEMENT,
          (encoded.length + 1) * Uint8Array.BYTES_PER_ELEMENT
        );

        if (phraseAddress === 0) {
          throw new Error('malloc failed: Cannot allocate memory');
        }

        const memoryBufferUint8 = new Uint8Array(this._wasmMemory.buffer);
        memoryBufferUint8.set(encoded, phraseAddress);
        memoryBufferUint8[phraseAddress + encoded.length] = 0;

        const status = await this._pvOctopusSearch(
          this._objectAddress,
          octopusMetadata.metadataAddress,
          octopusMetadata.metadataLength,
          phraseAddress,
          this._octopusMatchAddressAddress,
          this._octopusMatchLengthAddress
        );
        await this._pvFree(phraseAddress);
        if (status !== PV_STATUS_SUCCESS) {
          throw new Error(
            `search failed with status ${arrayBufferToStringAtIndex(
              memoryBufferUint8,
              await this._pvStatusToString(status)
            )}`
          );
        }

        const matches = [];
        const octopusMatchAddress = this._memoryBufferView.getInt32(this._octopusMatchAddressAddress, true);
        const octopusMatchLength = this._memoryBufferView.getInt32(this._octopusMatchLengthAddress, true);

        for (let i = 0; i < octopusMatchLength; i++) {
          const octopusMatch = octopusMatchAddress + i * (3 * Number(Float32Array.BYTES_PER_ELEMENT));

          const startSec = this._memoryBufferView.getFloat32(octopusMatch, true);
          const endSec = this._memoryBufferView.getFloat32(octopusMatch + Number(Float32Array.BYTES_PER_ELEMENT), true);
          const probability = this._memoryBufferView.getFloat32(octopusMatch + 2 * Number(Float32Array.BYTES_PER_ELEMENT), true);

          matches.push({
            startSec,
            endSec,
            probability
          });
        }

        return matches;
      }).then((result: OctopusMatch[]) => {
        resolve(result);
      }).catch((error: any) => {
        reject(error);
      });
    });

    return returnPromise;
  }

  /**
   * Releases resources acquired by WebAssembly module.
   */
  public async release(): Promise<void> {
    await this._pvOctopusDelete(this._objectAddress);
    delete this._wasmMemory;
    this._wasmMemory = undefined;
  }

  private static async initWasm(accessKey: string, wasmBase64: string, modelPath: string, initConfig: OctopusInitConfig): Promise<any> {
    // A WebAssembly page has a constant size of 64KiB. -> 1MiB ~= 16 pages
    const memory = new WebAssembly.Memory({ initial: 512 });

    const memoryBufferUint8 = new Uint8Array(memory.buffer);

    const exports = await buildWasm(memory, wasmBase64);

    const aligned_alloc = exports.aligned_alloc as aligned_alloc_type;
    const pv_free = exports.pv_free as pv_free_type;

    const pv_octopus_version = exports.pv_octopus_version as pv_octopus_version_type;
    const pv_octopus_index = exports.pv_octopus_index as pv_octopus_index_type;
    const pv_octopus_search = exports.pv_octopus_search as pv_octopus_search_type;
    const pv_octopus_delete = exports.pv_octopus_delete as pv_octopus_delete_type;
    const pv_octopus_init = exports.pv_octopus_init as pv_octopus_init_type;
    const pv_status_to_string = exports.pv_status_to_string as pv_status_to_string_type;
    const pv_sample_rate = exports.pv_sample_rate as pv_sample_rate_type;

    const metadataAddressAddress = await aligned_alloc(
      Int32Array.BYTES_PER_ELEMENT,
      Int32Array.BYTES_PER_ELEMENT
    );
    if (metadataAddressAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const metadataLengthAddress = await aligned_alloc(
      Int32Array.BYTES_PER_ELEMENT,
      Int32Array.BYTES_PER_ELEMENT
    );
    if (metadataLengthAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const octopusMatchAddressAddress = await aligned_alloc(
      Int32Array.BYTES_PER_ELEMENT,
      Int32Array.BYTES_PER_ELEMENT
    );
    if (octopusMatchAddressAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const octopusMatchLengthAddress = await aligned_alloc(
      Int32Array.BYTES_PER_ELEMENT,
      Int32Array.BYTES_PER_ELEMENT
    );
    if (octopusMatchLengthAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const objectAddressAddress = await aligned_alloc(
      Int32Array.BYTES_PER_ELEMENT,
      Int32Array.BYTES_PER_ELEMENT
    );
    if (objectAddressAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const accessKeyAddress = await aligned_alloc(
      Uint8Array.BYTES_PER_ELEMENT,
      (accessKey.length + 1) * Uint8Array.BYTES_PER_ELEMENT
    );
    if (accessKeyAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }
    for (let i = 0; i < accessKey.length; i++) {
      memoryBufferUint8[accessKeyAddress + i] = accessKey.charCodeAt(i);
    }
    memoryBufferUint8[accessKeyAddress + accessKey.length] = 0;

    const modelPathAddress = await aligned_alloc(
      Uint8Array.BYTES_PER_ELEMENT,
      (modelPath.length + 1) * Uint8Array.BYTES_PER_ELEMENT
    );
    if (modelPathAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }
    for (let i = 0; i < modelPath.length; i++) {
      memoryBufferUint8[modelPathAddress + i] = modelPath.charCodeAt(i);
    }
    memoryBufferUint8[modelPathAddress + modelPath.length] = 0;

    const status = await pv_octopus_init(accessKeyAddress, modelPathAddress, objectAddressAddress);
    await pv_free(accessKeyAddress);
    if (status !== PV_STATUS_SUCCESS) {
      throw new Error(
        `'pv_octopus_init' failed with status ${arrayBufferToStringAtIndex(
          memoryBufferUint8,
          await pv_status_to_string(status)
        )}`
      );
    }

    const memoryBuffer = new Uint8Array(memory.buffer);
    const memoryBufferView = new DataView(memory.buffer);
    const objectAddress = memoryBufferView.getInt32(
      objectAddressAddress,
      true
    );

    const sampleRate = await pv_sample_rate();
    const versionAddress = await pv_octopus_version();
    const version = arrayBufferToStringAtIndex(
      memoryBuffer,
      versionAddress,
    );

    await pv_free(objectAddressAddress);
    await pv_free(accessKeyAddress);
    await pv_free(modelPathAddress);

    return {
      memory: memory,
      alignedAlloc: aligned_alloc,
      pvFree: pv_free,
      pvOctopusDelete: pv_octopus_delete,
      pvOctopusIndex: pv_octopus_index,
      pvOctopusSearch: pv_octopus_search,
      pvStatusToString: pv_status_to_string,
      sampleRate: sampleRate,
      version: version,
      objectAddress: objectAddress,
      metadataAddressAddress: metadataAddressAddress,
      metadataLengthAddress: metadataLengthAddress,
      octopusMatchAddressAddress: octopusMatchAddressAddress,
      octopusMatchLengthAddress: octopusMatchLengthAddress,
    };
  }
}
